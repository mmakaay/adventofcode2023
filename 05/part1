#!/usr/bin/env python3

import sys
from dataclasses import dataclass


Identity = int


@dataclass(slots=True, frozen=True)
class Translation:
    source: int
    target: int
    range: int

    def from_source(self, identity: Identity) -> Identity | None:
        if identity >= self.source and identity < (self.source + self.range):
            return self.target + (identity - self.source)         
        return None
 

Seed = Identity
Seeds = list[Seed]
Category = str
CategoryLinks = dict[Category, Category]
Mappings = dict[Category, list[Translation]]


def read_seeds() -> Seeds:
    return list(map(int, sys.stdin.readline().split(":")[1].split()))


def read_mappings() -> tuple[Mappings, CategoryLinks]:
    mappings: Mappings = {}
    links: CategoryLinks = {}
    source_type: str = ""
    target_type: str = ""
    for line in (line.strip() for line in sys.stdin.readlines()):
        if line == "":
            continue
        elif ":" in line:
            source_type, target_type = line.split()[0].split("-to-")
            links[source_type] = target_type
            mappings[source_type] = []
        else:
            target, source, range_len = map(int, line.split())
            translation = Translation(source, target, range_len)
            mappings[source_type].append(translation)
    return mappings, links


def get_location(seed: Seed, mappings: Mappings, links: CategoryLinks) -> Identity:
    identity = seed
    category = "seed"
    while category in links:
        translated = list(
            translation.from_source(identity)
            for translation in mappings[category]
        )
        identity = next((i for i in translated if i is not None), identity)
        category = links[category]
    assert category == "location"
    return identity

def resolve(seeds: Seeds, mappings: Mappings, links: CategoryLinks) -> Identity:
    locations = (get_location(seed, mappings, links) for seed in seeds)
    return min(locations)


seeds = read_seeds()
mappings, links = read_mappings()
location = resolve(seeds, mappings, links)
print(location)
